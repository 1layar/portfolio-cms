/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateConfigArgs } from "./CreateConfigArgs";
import { UpdateConfigArgs } from "./UpdateConfigArgs";
import { DeleteConfigArgs } from "./DeleteConfigArgs";
import { ConfigFindManyArgs } from "./ConfigFindManyArgs";
import { ConfigFindUniqueArgs } from "./ConfigFindUniqueArgs";
import { Config } from "./Config";
import { User } from "../../user/base/User";
import { ConfigService } from "../config.service";

@graphql.Resolver(() => Config)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ConfigResolverBase {
  constructor(
    protected readonly service: ConfigService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "read",
    possession: "any",
  })
  async _configsMeta(
    @graphql.Args() args: ConfigFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Config])
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "read",
    possession: "any",
  })
  async configs(@graphql.Args() args: ConfigFindManyArgs): Promise<Config[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Config, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "read",
    possession: "own",
  })
  async config(
    @graphql.Args() args: ConfigFindUniqueArgs
  ): Promise<Config | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Config)
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "create",
    possession: "any",
  })
  async createConfig(@graphql.Args() args: CreateConfigArgs): Promise<Config> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Config)
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "update",
    possession: "any",
  })
  async updateConfig(
    @graphql.Args() args: UpdateConfigArgs
  ): Promise<Config | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Config)
  @nestAccessControl.UseRoles({
    resource: "Config",
    action: "delete",
    possession: "any",
  })
  async deleteConfig(
    @graphql.Args() args: DeleteConfigArgs
  ): Promise<Config | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async user(@graphql.Parent() parent: Config): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
