/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ArticleCreateNestedManyWithoutCategoriesInput } from "./ArticleCreateNestedManyWithoutCategoriesInput";
import { ValidateNested, IsOptional, IsString, IsJSON } from "class-validator";
import { Type } from "class-transformer";
import { GraphQLJSONObject } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ProjectCreateNestedManyWithoutCategoriesInput } from "./ProjectCreateNestedManyWithoutCategoriesInput";
@InputType()
class CategoryCreateInput {
  @ApiProperty({
    required: false,
    type: () => ArticleCreateNestedManyWithoutCategoriesInput,
  })
  @ValidateNested()
  @Type(() => ArticleCreateNestedManyWithoutCategoriesInput)
  @IsOptional()
  @Field(() => ArticleCreateNestedManyWithoutCategoriesInput, {
    nullable: true,
  })
  articles?: ArticleCreateNestedManyWithoutCategoriesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  color?: string | null;

  @ApiProperty({
    required: true,
  })
  @IsJSON()
  @Field(() => GraphQLJSONObject)
  name!: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => ProjectCreateNestedManyWithoutCategoriesInput,
  })
  @ValidateNested()
  @Type(() => ProjectCreateNestedManyWithoutCategoriesInput)
  @IsOptional()
  @Field(() => ProjectCreateNestedManyWithoutCategoriesInput, {
    nullable: true,
  })
  projects?: ProjectCreateNestedManyWithoutCategoriesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  slug!: string;
}
export { CategoryCreateInput };
